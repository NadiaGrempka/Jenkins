pipeline {
  agent any

  // 1. ↓ zmienne środowiskowe używane w potoku
  environment {
    TARGET_DIR    = 'target'
    CLASS_DIR     = "${TARGET_DIR}/classes"
    TEST_DIR      = "${TARGET_DIR}/test-classes"
    REPORT_DIR    = "${TARGET_DIR}/reports"
    GIT_CRED_ID   = 'git-credentials-id'
//     API_KEY       = credentials('api-key-id')
  }

  stages {

    // 1. Checkout: pobierz kod z repozytorium
    stage('Checkout') {
          steps {
            git url: 'https://github.com/NadiaGrempka/Jenkins.git',
                credentialsId: 'git-credentials-id'
          }

    // 2. Validation: sprawdź strukturę projektu
    stage('Validation') {
      steps {
        sh '''
          for d in src/main/java src/test/java lib; do
            [ -d "$d" ] || { echo "Brak katalogu $d"; exit 1; }
          done
        '''
      }
    }

    // 3. Build: przygotuj katalogi i skompiluj kod
    stage('Build') {
      steps {
        sh '''
          mkdir -p ${CLASS_DIR} ${TEST_DIR} ${REPORT_DIR}
          javac -cp "lib/*" -d ${CLASS_DIR} $(find src/main/java -name '*.java')
          javac -cp "lib/*:${CLASS_DIR}" -d ${TEST_DIR} $(find src/test/java -name '*.java')
        '''
      }
      // 4. stash: zapisz skompilowane pliki i lib/ dla etapu Test
      post {
        success {
          stash includes: "${CLASS_DIR}/**,${TEST_DIR}/**,lib/**", name: 'classes-and-lib'
        }
      }
    }

    // 5. Test: odtwórz stasha, uruchom JUnit, zbierz raporty zawsze
    stage('Test') {
      steps {
        unstash 'classes-and-lib'
        script {
          try {
            sh '''
              java -jar lib/junit-platform-console-standalone-*.jar \
                --class-path ${CLASS_DIR}:${TEST_DIR}:lib/* \
                --scan-class-path \
                --reports-dir=${REPORT_DIR} \
                --report-format=xml
            '''
          } finally {
            junit "${REPORT_DIR}/*.xml"
          }
        }
      }
    }

    // 6. Package: tylko na main – utwórz plik JAR
    stage('Package') {
      when { branch 'main' }
      steps {
        sh "jar cf app-${env.BUILD_ID}.jar -C ${CLASS_DIR} ."
      }
    }

    // 7. Archive: tylko na main – archiwizuj JAR i raporty
    stage('Archive') {
      when { branch 'main' }
      steps {
        archiveArtifacts artifacts: "app-${env.BUILD_ID}.jar, ${REPORT_DIR}/*.xml", fingerprint: true
      }
    }
  }
}
}